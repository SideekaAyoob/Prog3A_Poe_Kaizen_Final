// <auto-generated />
using System;
using Kaizen_final.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kaizen_final.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230528115323_Intialmigration")]
    partial class Intialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kaizen_final.Models.Farmer", b =>
                {
                    b.Property<int>("farmerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("farmerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("farmerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("farmerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("farmerId");

                    b.ToTable("Farmers");

                    b.HasData(
                        new
                        {
                            farmerId = 1,
                            farmerEmail = "jhon@gmail.com",
                            farmerName = "Jhon",
                            farmerPhoneNumber = "1234567890"
                        },
                        new
                        {
                            farmerId = 2,
                            farmerEmail = "Tyreece@gmail.com",
                            farmerName = "tyreece",
                            farmerPhoneNumber = "1234567899"
                        },
                        new
                        {
                            farmerId = 3,
                            farmerEmail = "Hella@gmail.com",
                            farmerName = "Hella",
                            farmerPhoneNumber = "1234567888"
                        });
                });

            modelBuilder.Entity("Kaizen_final.Models.Tea", b =>
                {
                    b.Property<int>("TeaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TeaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tea_Stock")
                        .HasColumnType("int");

                    b.Property<int>("farmerid")
                        .HasColumnType("int");

                    b.Property<string>("picURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeaId");

                    b.HasIndex("farmerid");

                    b.ToTable("Teas");

                    b.HasData(
                        new
                        {
                            TeaId = 1,
                            Price = 50.99m,
                            TeaDescription = "Simple Green tea",
                            TeaName = "Sencha",
                            Tea_Stock = 15,
                            farmerid = 1,
                            picURL = "https://www.itoen-global.com/allabout_greentea/img/varieties_lineup01.png"
                        },
                        new
                        {
                            TeaId = 2,
                            Price = 55.99m,
                            TeaDescription = " steamed approximately twice as long as regular Sencha",
                            TeaName = "Fukamushi Sencha",
                            Tea_Stock = 10,
                            farmerid = 3,
                            picURL = "https://www.itoen-global.com/allabout_greentea/img/varieties_lineup02.png"
                        },
                        new
                        {
                            TeaId = 3,
                            Price = 60.99m,
                            TeaDescription = "covered culture for approximately 20 days prior to picking.",
                            TeaName = "Gyokuro",
                            Tea_Stock = 10,
                            farmerid = 1,
                            picURL = "https://www.itoen-global.com/allabout_greentea/img/varieties_lineup03.png"
                        },
                        new
                        {
                            TeaId = 4,
                            Price = 60.99m,
                            TeaDescription = "reed screen or cloth placed over them to block out most sunlight.",
                            TeaName = "Kabusecha",
                            Tea_Stock = 20,
                            farmerid = 2,
                            picURL = "https://www.itoen-global.com/allabout_greentea/img/varieties_lineup04.png"
                        },
                        new
                        {
                            TeaId = 5,
                            Price = 70.99m,
                            TeaDescription = "Tencha that is stoneground immediately before shipping",
                            TeaName = "Matcha",
                            Tea_Stock = 20,
                            farmerid = 3,
                            picURL = "https://www.itoen-global.com/allabout_greentea/img/varieties_lineup05.png"
                        },
                        new
                        {
                            TeaId = 6,
                            Price = 70.99m,
                            TeaDescription = "Screen Culture but after steaming, the leaves are dried without being rolled",
                            TeaName = "Tencha",
                            Tea_Stock = 20,
                            farmerid = 2,
                            picURL = "https://www.itoen-global.com/allabout_greentea/img/varieties_lineup06.png"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Kaizen_final.Models.Tea", b =>
                {
                    b.HasOne("Kaizen_final.Models.Farmer", "Farmer")
                        .WithMany("Teas")
                        .HasForeignKey("farmerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kaizen_final.Models.Farmer", b =>
                {
                    b.Navigation("Teas");
                });
#pragma warning restore 612, 618
        }
    }
}
